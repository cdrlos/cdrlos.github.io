I"y*<p>I recently applied for an apprenticeship with
<a href="https://wwww.smoothstack.com">Smoothstack</a> (a <em>better</em>
<a href="https://revature.com">Revature</a>?) and they had me take an assessment for their
Java software engineering track. For some reason they consider familiarity with
shell scripting to be an important component of their admissions, so I thought
I’d write a post to jog my memory.</p>

<p>This post has the potential to get out of hand so I’m gonna keep the content
down to the very basics: script parameters, conditional statements, for loops,
and strings. Everything you find here is infinitely better explained in [<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>]
or even better the official GNU reference manual [<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote">2</a></sup>].</p>

<p><strong style="color:red; opacity:0.8">Disclaimer:</strong> When I say shell scripting I
really mean Bash scripting, i.e. <code class="language-plaintext highlighter-rouge">bash</code>—not <code class="language-plaintext highlighter-rouge">zsh</code>, not <code class="language-plaintext highlighter-rouge">ksh</code>, especially not
<code class="language-plaintext highlighter-rouge">csh</code>, but <code class="language-plaintext highlighter-rouge">bash</code>.</p>

<h3 id="our-very-first-bash-script">Our very first Bash script</h3>

<p>Yes, our very first Bash script will be the beloved hello world script. Not very
exciting, I know, but we’re gonna build on it in future posts, OK? The bare
bones script looks like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">echo </span>Hello World
</code></pre></div></div>

<p>Write this to a file—say, <code class="language-plaintext highlighter-rouge">hello.sh</code>—with your favorite text editor then run
the command <code class="language-plaintext highlighter-rouge">$ chmod +x hello.sh</code> (this will make the file executable) and
execute it with <code class="language-plaintext highlighter-rouge">$ ./hello.sh</code>. This is nothing special, the script will print
<code class="language-plaintext highlighter-rouge">Hello World</code> to standard output.</p>

<h3 id="taking-parameters">Taking parameters</h3>

<p>Let’s make our hello world script more interactive. In particular, we’ll turn it
into a proper hello function by making it take parameters. Go back into your
editor and modify the contents of <code class="language-plaintext highlighter-rouge">hello.sh</code> until it looks like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
  </span><span class="nb">echo </span>Hello World
<span class="k">else
  </span><span class="nb">echo </span>Hello <span class="nv">$1</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>Now we can run <code class="language-plaintext highlighter-rouge">$./hello.sh Dan</code> and the terminal will echo <code class="language-plaintext highlighter-rouge">Hello Dan</code> and fall
back on its previous behavior if no argument is supplied.</p>

<p>OK, nice our very first if statement. But what’s with the <code class="language-plaintext highlighter-rouge">$1</code> and <code class="language-plaintext highlighter-rouge">-z</code>? The
<code class="language-plaintext highlighter-rouge">$1</code> is easy enough to explain—it holds the first <a href="https://www.gnu.org/software/bash/manual/html_node/Positional-Parameters.html">positional
parameter</a>
passed to the script, in this case <code class="language-plaintext highlighter-rouge">Dan</code>. The <code class="language-plaintext highlighter-rouge">-z</code> is another beast. If you read
the manual page <code class="language-plaintext highlighter-rouge">$ man bash</code> and scroll down to the section on conditional
expressions you’ll see that it’s one of a number of different <em>flags</em> the <code class="language-plaintext highlighter-rouge">test</code>
command takes. This one in particular tests for the empty string. :confused:?
Hold on! <code class="language-plaintext highlighter-rouge">test</code> command, what <code class="language-plaintext highlighter-rouge">test</code> command? You thought those square brackets
after the <code class="language-plaintext highlighter-rouge">if</code> statement were just part of the syntax right? Well, you’re wrong.
It’s <a href="https://developer.ibm.com/technologies/linux/tutorials/l-bash-test/">another way of writing
<code class="language-plaintext highlighter-rouge">test</code></a>,
i.e. we could have written our script as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">if </span><span class="nb">test</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
<span class="k">then
  </span><span class="nb">echo </span>Hello World
<span class="k">else
  </span><span class="nb">echo </span>Hello <span class="nv">$1</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>What’s more the space between <code class="language-plaintext highlighter-rouge">[ ... ]</code> is not optional. Go ahead and remove it
and see what happens.</p>

<p>We can extend our hello script, making it take another argument for your last
name, and so on and so forth:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
  </span><span class="nb">echo </span>Hello World
<span class="k">elif</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then
  </span><span class="nb">echo </span>Hello <span class="nv">$1</span>
ele
  <span class="nb">echo </span>Hello <span class="nv">$1</span> <span class="nv">$2</span>
<span class="k">fi</span>
</code></pre></div></div>

<h3 id="what-if-i-want-to-pass-like-10-parameters-to-the-script">What if I want to pass like 10 parameters to the script?</h3>

<p>For that dear reader we have the symbol <code class="language-plaintext highlighter-rouge">@</code> which captures the positional
parameters to the script. If we wanted to call it a day we would write <code class="language-plaintext highlighter-rouge">Hello $@</code>, but let’s print a proper sentence to stdout for once in this post. To do
that we’ll need to build up a string from the inputs which separates the
supplied positional parameters with a comma then a space. We will use the
variable <code class="language-plaintext highlighter-rouge">greeting</code> to hold this string. We will also introduce the for loop as
we need to iterate over the positional parameters:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nv">greeting</span><span class="o">=</span><span class="s2">"Hello"</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">]</span>
<span class="k">then </span><span class="nv">greeting</span><span class="o">=</span><span class="s2">"</span><span class="nv">$greeting</span><span class="s2"> World"</span>
<span class="k">else for </span>name <span class="k">in</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
<span class="k">do
  </span><span class="nv">greeting</span><span class="o">=</span><span class="s2">"</span><span class="nv">$greeting</span><span class="s2"> </span><span class="nv">$name</span><span class="s2">,"</span>
<span class="k">done
fi
</span><span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">greeting</span><span class="p">%,</span><span class="k">}</span><span class="s2">!"</span>
</code></pre></div></div>

<p>Some things to notice here. Notice that the <code class="language-plaintext highlighter-rouge">=</code> operator is placed directly
after the name of the variable and before the new value it assumes. This is
important. Put a space before or after and <code class="language-plaintext highlighter-rouge">bash</code> will throw an error. Try it.
In will interpret either the variable or the value as a command. The <code class="language-plaintext highlighter-rouge">for</code> loop
should look fairly familiar if you have ever programmed in JavaScript or Python,
but the ensuing operations must be contained within a <code class="language-plaintext highlighter-rouge">do ... done</code> block. We
recursively build the greeting and then print it to stdout. But what is up with
that last line? I had to invoke some <a href="https://tldp.org/LDP/abs/html/string-manipulation.html">string
magic</a> to get rid of the
trailing comma. It’s not as mysterious as it initially seems, but I’ll leave you
to the man pages for that.</p>

<h3 id="calling-it-a-day">Calling it a day</h3>

<p>Hoo boy! There’s really so much to talk about on this topic. We haven’t even
covered pipes, redirection, <code class="language-plaintext highlighter-rouge">sed</code> and <code class="language-plaintext highlighter-rouge">awk</code> and regular expressions. These are
all important tools for any script scripter. Baby steps! I plan to follow this
up with a post on <code class="language-plaintext highlighter-rouge">sed</code> and regular expressions, but I’ll be throwing in the
towel on Bash scripting after that. There is a place for rudimentary Bash script
in my toolbox, but it’s not my tool of choice and I don’t care about
cheaping-out on it.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/index.html">Bash Guide for Beginners</a> by Machtelt Garrels. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><a href="https://www.gnu.org/software/bash/manual/html_node/index.html">Bash Reference Manual</a> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET